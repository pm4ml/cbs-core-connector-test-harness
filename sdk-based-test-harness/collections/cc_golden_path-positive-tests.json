{
  "options": {
    "breakOnError": false,
    "transformerName": "none",
    "generateIDType": "ulid"
  },
  "name": "cc_golden_path-positive-tests",
  "test_cases": [
    {
      "id": 1,
      "name": "Outgoing P2P use case",
      "fileInfo": {
        "path": "cc_golden_path-positive-tests.json"
      },
      "meta": {
        "info": "Outgoing P2P use case"
      },
      "requests": [
        {
          "id": 1,
          "description": "Successful Transfer Test",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "send-money-api",
            "asynchronous": false,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/send-money-api_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/send-money-api_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/send-money-api_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/send-money-api_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/send-money-api_2.0/trigger_templates"
          },
          "operationPath": "/send-money",
          "path": "/send-money",
          "method": "post",
          "url": "{$inputs.cc_outgoing_url}",
          "body": {
            "homeTransactionId": "{$function.generic.generateUUID}",
            "payeeId": "{$environment.payeeId}",
            "payeeIdType": "{$environment.payeeIdType}",
            "sendAmount": "{$environment.sendAmount}",
            "sendCurrency": "{$environment.sendCurrency}",
            "receiveCurrency": "{$environment.receiveCurrency}",
            "purposeCode": "{$environment.sendMoneyPurposeCode}",
            "transactionType": "TRANSFER",
            "payer": {
              "name": "{$environment.payerName}",
              "payerId": "{$environment.payerId}",
              "DateAndPlaceOfBirth": {
                "BirthDt": "{$environment.payerDOB}",
                "PrvcOfBirth": "{$environment.payerPrvncOB}",
                "CityOfBirth": "{$environment.payerCityOB}",
                "CtryOfBirth": "{$environment.payerCtryOB}"
              }
            }
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check response status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check transactionId is present in response",
                "exec": [
                  "expect(response.body.transactionId).not.to.equal(undefined)"
                ]
              }
            ]
          },
          "disabled": false,
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "environment.sendTransferId = response.body.transactionId",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Good Quotes are Accepted Test",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "send-money-api",
            "asynchronous": false,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/send-money-api_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/send-money-api_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/send-money-api_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/send-money-api_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/send-money-api_2.0/trigger_templates"
          },
          "operationPath": "/send-money/{transferId}",
          "path": "/send-money/{$environment.sendTransferId}",
          "method": "put",
          "params": {
            "transferId": "{$environment.sendTransferId}"
          },
          "url": "{$inputs.cc_outgoing_url}",
          "body": {
            "acceptQuote": true,
            "homeTransactionId": "HTX123456789"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check response status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check response body should contain transferId",
                "exec": [
                  "expect(response.body.transferId).not.to.equal(undefined)"
                ]
              }
            ]
          },
          "disabled": false
        },
        {
          "id": 3,
          "description": "Requesting Transactions Status is functioning",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "send-money-api",
            "asynchronous": false,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/send-money-api_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/send-money-api_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/send-money-api_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/send-money-api_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/send-money-api_2.0/trigger_templates"
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$environment.sendTransferId}",
          "method": "get",
          "params": {
            "transferId": "{$environment.sendTransferId}"
          },
          "url": "{$inputs.cc_outgoing_url}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check response status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false
        }
      ]
    },
    {
      "id": 2,
      "name": "Outgoing P2B use case",
      "fileInfo": {
        "path": "cc_golden_path-positive-tests.json"
      },
      "meta": {
        "info": "Outgoing P2B use case"
      },
      "requests": [
        {
          "id": 1,
          "description": "Successful Transfer Test",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "send-money-api",
            "asynchronous": false,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/send-money-api_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/send-money-api_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/send-money-api_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/send-money-api_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/send-money-api_2.0/trigger_templates"
          },
          "operationPath": "/merchant-payment",
          "path": "/merchant-payment",
          "method": "post",
          "url": "{$inputs.cc_outgoing_url}",
          "body": {
            "homeTransactionId": "{$function.generic.generateUUID}",
            "payeeId": "{$environment.payeeId}",
            "payeeIdType": "{$environment.payeeIdType}",
            "receiveAmount": "{$environment.merchantAmount}",
            "sendCurrency": "{$environment.sendCurrency}",
            "receiveCurrency": "{$environment.receiveCurrency}",
            "purposeCode": "{$environment.sendMoneyPurposeCode}",
            "transactionType": "TRANSFER",
            "payer": {
              "name": "{$environment.payerName}",
              "payerId": "{$environment.payerId}",
              "DateAndPlaceOfBirth": {
                "BirthDt": "{$environment.payerDOB}",
                "PrvcOfBirth": "{$environment.payerPrvncOB}",
                "CityOfBirth": "{$environment.payerCityOB}",
                "CtryOfBirth": "{$environment.payerCtryOB}"
              }
            }
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check response status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check transactionId is present in response",
                "exec": [
                  "expect(response.body.transactionId).not.to.equal(undefined)"
                ]
              }
            ]
          },
          "disabled": false,
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "environment.merchantTransferId = response.body.transactionId",
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Good Quotes are Accepted Test",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "send-money-api",
            "asynchronous": false,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/send-money-api_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/send-money-api_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/send-money-api_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/send-money-api_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/send-money-api_2.0/trigger_templates"
          },
          "operationPath": "/merchant-payment/{transferId}",
          "path": "/merchant-payment/{$environment.merchantTransferId}",
          "method": "put",
          "params": {
            "transferId": "{$environment.merchantTransferId}"
          },
          "url": "{$inputs.cc_outgoing_url}",
          "body": {
            "acceptQuote": true,
            "homeTransactionId": "{$prev.7.request.body.homeTransactionId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check response status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check response body should contain transferId",
                "exec": [
                  "expect(response.body.transferId).not.to.equal(undefined)"
                ]
              }
            ]
          },
          "disabled": false
        },
        {
          "id": 3,
          "description": "Requesting Transactions Status is functioning",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "send-money-api",
            "asynchronous": false,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/send-money-api_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/send-money-api_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/send-money-api_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/send-money-api_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/send-money-api_2.0/trigger_templates"
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$environment.sendTransferId}",
          "method": "get",
          "params": {
            "transferId": "{$environment.sendTransferId}"
          },
          "url": "{$inputs.cc_outgoing_url}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check response status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false
        }
      ]
    },
    {
      "id": 3,
      "name": "Incoming Payments",
      "fileInfo": {
        "path": "cc_golden_path-positive-tests.json"
      },
      "meta": {
        "info": "Incoming Payments"
      },
      "requests": [
        {
          "id": 1,
          "description": "Successful Discovery Test",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets",
            "asynchronous": false,
            "prefix": "/backend",
            "specFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/trigger_templates"
          },
          "operationPath": "/parties/{IdType}/{ID}",
          "path": "/parties/{IdType}/{ID}",
          "method": "get",
          "params": {
            "ID": "{$inputs.payeeId}",
            "IdType": "{$inputs.payeeIdType}"
          },
          "url": "{$inputs.cc_incoming_url}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check response status code should be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false
        },
        {
          "id": 2,
          "description": "POST quoterequests Happy Path",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets",
            "asynchronous": false,
            "prefix": "/backend",
            "specFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/trigger_templates"
          },
          "operationPath": "/quoterequests",
          "path": "/quoterequests",
          "method": "post",
          "url": "{$inputs.cc_incoming_url}",
          "body": {
            "amount": "{$inputs.payeeAmount}",
            "amountType": "SEND",
            "currency": "{$inputs.incomingCurrency}",
            "from": {
              "idType": "MSISDN",
              "idValue": "{$inputs.payerId}"
            },
            "initiator": "PAYER",
            "initiatorType": "CONSUMER",
            "quoteId": "{$function.generic.generateUUID}",
            "to": {
              "idType": "{$inputs.payeeIdType}",
              "idValue": "{$inputs.payeeId}"
            },
            "transactionId": "{$function.generic.generateUUID}",
            "transactionType": "TRANSFER"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check response status code should be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false
        },
        {
          "id": 3,
          "description": "POST Transfers Happy Path ",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets",
            "asynchronous": false,
            "prefix": "/backend",
            "specFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/trigger_templates"
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "url": "{$inputs.cc_incoming_url}",
          "body": {
            "transferId": "{$function.generic.generateUUID}",
            "amount": "{$environment.payeeAmount}",
            "amountType": "SEND",
            "currency": "{$inputs.incomingCurrency}",
            "from": {
              "idType": "MSISDN",
              "idValue": "777123456"
            },
            "to": {
              "idType": "{$environment.payeeIdType}",
              "idValue": "{$environment.payeeId}"
            },
            "ilpPacket": {
              "data": {
                "amount": {
                  "amount": "400",
                  "currency": "EUR"
                },
                "payee": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "56733123450",
                    "fspId": "mtnuganda"
                  },
                  "merchantClassificationCode": "1234",
                  "name": "Payee Name",
                  "personalInfo": {
                    "complexName": {
                      "firstName": "PayeeFirstName",
                      "lastName": "PayeeLastName"
                    },
                    "dateOfBirth": "2001-08-21"
                  },
                  "supportedCurrencies": [
                    "EUR"
                  ]
                },
                "payer": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "0882997445",
                    "fspId": "tnmmalawi"
                  },
                  "merchantClassificationCode": "1234",
                  "name": "Payee Name",
                  "personalInfo": {
                    "complexName": {
                      "firstName": "PayeeFirstName",
                      "lastName": "PayeeLastName"
                    },
                    "dateOfBirth": "2001-08-21"
                  },
                  "supportedCurrencies": [
                    "ZMW"
                  ]
                },
                "quoteId": "2d93d09c-aa9f-411a-ba48-b315dd04d5d8",
                "transactionId": "25394f6a-aa14-46a2-b28a-35140e842f7d",
                "transactionType": {
                  "initiator": "PAYER",
                  "initiatorType": "CONSUMER",
                  "scenario": "TRANSFER",
                  "subScenario": "LOCALLY_DEFINED_SUBSCENARIO"
                }
              }
            },
            "transactionType": "TRANSFER",
            "quote": {
              "expiration": "2024-10-15T13:17:57.742Z",
              "payeeFspCommissionAmount": "0",
              "payeeFspCommissionAmountCurrency": "MWK",
              "payeeFspFeeAmount": "0",
              "payeeFspFeeAmountCurrency": "MWK",
              "payeeReceiveAmount": "{$environment.payeeAmount}",
              "payeeReceiveAmountCurrency": "MWK",
              "quoteId": "1d0a1eae-02de-4bdb-beb5-fb87f200fa4e",
              "transactionId": "13b362e2-8a73-4e81-a6a1-88cb142cf027",
              "transferAmount": "{$environment.payeeAmount}",
              "transferAmountCurrency": "MWK"
            },
            "note": "Transfer Quote Request"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check status code to equal 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false
        },
        {
          "id": 4,
          "description": "PUT /transfers/{transferId}",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets",
            "asynchronous": false,
            "prefix": "/backend",
            "specFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/sdk-scheme-adapter-backend-v2_1_0-openapi3-snippets_2.1/trigger_templates"
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/f7fbf391-c29b-4534-bc86-1892568f7ad8",
          "method": "put",
          "params": {
            "transferId": "f7fbf391-c29b-4534-bc86-1892568f7ad8"
          },
          "url": "http://{$environment.connectorHost}:3003",
          "body": {
            "currentState": "COMPLETED",
            "transferId": "{$function.generic.generateUUID}",
            "quoteRequest": {
              "body": {
                "quoteId": "{$function.generic.generateUUID}",
                "transactionId": "{$function.generic.generateUUID}",
                "payee": {
                  "partyIdInfo": {
                    "partyIdType": "{$environment.payeeIdType}",
                    "partyIdentifier": "{$environment.payeeId}"
                  }
                },
                "payer": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$environment.payerId}"
                  }
                },
                "amountType": "SEND",
                "amount": {
                  "currency": "{$environment.receiveCurrency}",
                  "amount": "{$environment.payeeAmount}"
                },
                "transactionType": {
                  "scenario": "DEPOSIT",
                  "initiator": "PAYER",
                  "initiatorType": "CONSUMER"
                }
              }
            }
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check response status code",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false
        }
      ]
    },
    {
      "id": 4,
      "name": "Identifier Uploads Happy Path",
      "fileInfo": {
        "path": "cc_golden_path-positive-tests.json"
      },
      "meta": {
        "info": "Identifier Uploads Happy Path"
      },
      "requests": [
        {
          "id": 1,
          "description": "POST /accounts",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "send-money-api",
            "asynchronous": false,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/send-money-api_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/send-money-api_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/send-money-api_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/send-money-api_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/send-money-api_2.0/trigger_templates"
          },
          "operationPath": "/accounts",
          "path": "/accounts",
          "method": "post",
          "url": "{$inputs.cc_outgoing_url}",
          "body": [
            {
              "idType": "{$environment.payeeIdType}",
              "idValue": "{$environment.payeeId}"
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "expect response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "DELETE /accounts/{IdType}/{IdValue}",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "send-money-api",
            "asynchronous": false,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/send-money-api_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/send-money-api_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/send-money-api_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/send-money-api_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/send-money-api_2.0/trigger_templates"
          },
          "operationPath": "/accounts/{Type}/{ID}",
          "path": "/accounts/{$environment.payeeIdType}/{$environment.payeeId}",
          "method": "delete",
          "params": {
            "Type": "{$environment.payeeIdType}",
            "ID": "{$environment.payeeId}"
          },
          "url": "{$inputs.cc_outgoing_url}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "expect response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false
        }
      ]
    }
  ]
}